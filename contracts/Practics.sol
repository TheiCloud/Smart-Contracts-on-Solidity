// SPDX-License-Identifier: MIT

pragma solidity ^0.8.29;

/** 1. –ö–æ–ø–∏–ª–∫–∞ (PiggyBank)
–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ñ–∏—Ä –∏ –¥–∞—ë—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –∑–∞–±—Ä–∞—Ç—å –≤—Å—ë –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ.
üîπ receive() + withdraw() —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.
üîπ –ò—Å–ø–æ–ª—å–∑—É–π payable, require, owner, address(this).balance.*/ 


import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

contract PiggyBank is Ownable {

    constructor() Ownable(_msgSender()){}

    receive() external payable {}

    function withdraw() public {
        payable(owner()).transfer(address(this).balance);
    }
}


/**‚úÖ 2. –£–º–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ (SmartCounter)
–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ increment(), decrement(), get().
üîπ –°–æ—Ö—Ä–∞–Ω—è–π –∑–Ω–∞—á–µ–Ω–∏–µ –≤ storage.
üîπ decrement –Ω–µ –¥–æ–ª–∂–µ–Ω —É—Ö–æ–¥–∏—Ç—å –≤ –º–∏–Ω—É—Å */

contract SmartCounter {

    uint256 private age;

    error OverflowValue();
    error TheMinimumValueHasBeenReached();

    function setAge(uint256 _age) public {
        require(_age > 0, OverflowValue());
        age = _age;
    }

    function increment() public {
        require(age != type(uint256).max, OverflowValue());
        age++;
    }

    function decrement() public {
        require(age != 0, TheMinimumValueHasBeenReached());
        age--;
    }

    function getAge() public view returns(uint256){
        return age;
    }
}

/**3. –ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (SimpleArray)
–•—Ä–∞–Ω–∏ –º–∞—Å—Å–∏–≤ uint[] –∏ —Ä–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏:
üîπ addNumber(uint) ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤
üîπ getNumber(uint) ‚Äî –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É
üîπ getAll() ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤–µ—Å—å –º–∞—Å—Å–∏–≤
üîπ getSum() ‚Äî —Å—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª */

contract SimpleArray {
    uint256[] public array;

    function addNumber(uint256 value) public {
        array.push(value);
    }

    function getNumber(uint256 index) public view returns(uint256) {
        return array[index];
    }

    function getAll() public view returns(uint256[] memory){
        return array;
    }
}